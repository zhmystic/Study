面试题：谈谈你对JAVA的理解
    1.平台无关性：一次编译，到处运行。
    2.GC：垃圾回收机制。不用手动释放内存。
    3.语言特性：泛型，反射，LAMDA表达式。
    4.面向对象：封装，继承，多态。
    5.类库。
    6.异常处理。
    
一次编译，到处运行是如何实现的？也就是说Java是如何实现平台无关性的？
    我们通常把Java分为 编译期 和 运行时
    编译期：编译的时候，我们会用到javac指令，javac编译的是Java的源码，即将源码编译生成的二进制字节码，并存入到对应的.class文件当中。
    我们如何查看字节码文件。首先可以通过外部编辑器，但是是乱码的。也可以通过IDEA直接打开，但是那个直接反编译了。我们可以通过一个JDK的命令来实现，叫做：javap。
    javap是Java自带的一个反编译，可以查看Java编译期为我们生成的字节码。
    Javap -c class文件名 
    
    第一行说的是咱们这个类是从哪里编译而来
    第二行说的是一个默认的无参构造函数。1：invoke这行，代表调用了它的父类，object；return代表退出构造函数。
    所以从这里可以看出，当我们不指定类的构造函数的时候，编译器会默认为我们生成一个不带参的构造函数。
那么一次编译，到处运行时如何实现的呢？
    java源码首先被编译成字节码，再由不同的JVM进行解析，Java语言在不同的平台上进行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。

为什么JVM不直接将源码解析成机器码去执行？
    为什么需要先编译成.class文件呢。因为如果我们不这样的话，直接解析成字节码的话。会有以下缺点：
    1.准备工作，每次执行都需要各种检查。
    2.兼容性，也可以将别的语言解析成字节码。

JVM如何加载.class文件？
Java虚拟机
1.Class Loader类加载系统：依据特定格式，加载class文件到内存。
2.Execution Engine执行引擎：对命令进行解析。
3.Native Interface：融合不同开发语言的原生库，为java所用。也就是一些native方法。java的原生方法用到的一些库函数，调用C或者别的。
4.Runtime Data Area：运行时数据区。 JVM内存空间结构模型。我们所写的程序都会被加载到这里。
所以，如何加载class文件？
    JVM主要由类加载系统，运行时数据区，执行引擎，本地库接口，四部分组成。它主要通过Class Loader将符合要求的.class文件加载到内存里，并通过Execution Engine执行引擎去解析class文件里面的字节码，并提交给操作系统去执行。

谈谈反射
概念：
    Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能成为java语言的反射机制。
写一个反射的例子：
反射样例：

getDeclaredMethod和getMethod的区别？
    两者都是获取类中方法的，但是区别在于：
    前者可以获取到私有方法，但是需要指定accessible为true；后者不能获取到私有方法。
    前者无法获取继承的或者是实现的接口中的方法，但是后者可以。

类从编译到执行的过程？
就用上面的类来举例子。
1.编译器将Robot.java源文件编译为Robot.class字节码文件。
2.ClassLoader类加载器将字节码转换为JVM中的Class<Robot>对象。
3.JVM利用Class<Robot>对象实例化为Robot对象。

谈谈ClassLoader
概念：
    ClassLoader在java中有着非常重要的做用那个，它主要工作在Class装载的加载阶段，其主要作用是从系统外部获得Class二进制数据流。它是Java的核心组件，所有的Class都是由ClassLoader进行加载的。ClassLoader负责通过将Class文件里的二级制数据流装载进系统，然后交给Java虚拟机进行连接，初始化等操作。
深入：
    通过看源代码可以看到，ClassLoader是一个抽象类。里面提供很多方法用来累的加载。
    里面有一个重要的方法，叫loadClass。
    点进去之后，发现里面的代码是这样的：
    这个parent，也是个ClassLoader。说以说明ClassLoader并不是单一的。
下面来所说ClassLoader的种类。
1.BootStratClassLoader：C++编写，用来加载核心库java.*。例如：java.lang….等等。
2.ExtClassLoader：Java编写，加载扩展库javax.*。用来加载jre/lib/ext目录下面的jar包。用户可以将自己的jar包放入这个路径下。
    进入源代码，看一下ExtClassLoader的，也是一大堆代码，不过有一段这样的：
    这里指定的获取路径。classloader就回去这里面的路径去查询，看是否有需要加载的东西。
3.AppClassLoader：Java编写，加载程序所在目录classpath下面的。同样，看源码：
    这个路径是可以打印出来看的。显而易见。类加载器就去这个对应下面去加载东西。
4.自定义ClassLoader：Java编写，定制化加载。
下面自定义一个ClassLoader。
关键函数：findClass  difineClass

测试类：

Wali是我们自定义的一个类，就在图中的path路径下 这是随便定义的一个类。
上图之所以要newInstance，就是为了让静态static里面生效。

输出结果如下：

    通过这个例子，我们大致明白了如何创建自定义classloader去加载类。在实现findClass的时候，我们不仅可以在自定义的目录下去加载.class文件。我们通过defineClass这个方法可以看出，只要传入的是二进制的流，合法的。我们便能通过不同的形式去加载，比如通过findclass去访问某个远程的网络，去获取二进制流，并生成我们需要的类；又或者说可以对某些敏感的class文件进行加密，在defineClass文件进行解密。

谈谈类加载器的双亲委派机制
原理图如下：

因为有多个种类的classLoader，所以会有一个机制，让它们相互协作，形成一个整体，这就是双亲委派机制。
从下向上检查类是否已经加载；从上向下尝试加载类。
去看源码如下：

    首先进去就是个锁，防止多个线程调用同一个classLoader去加载同一个类。为了避免冲突，加的锁。
    方法体中，首先就去本身找找看，是否加载过这个类，如果加载过，直接返回。不进if，也不进resolve；
    如果没加载过，那么进入If中，可以看到，如果parent不为空，调用parent的loadclass方法。一层调用一层。
那么从哪看出来加载器对应的父类加载器呢？
如下：还是通过刚才的自定义加载器，我们直接.parent方法，显而易见。
输出结果如下：

    再parent的话就是Null了，因为是C++写的，咱们看不到。如果想要去看代码，可以去网站：http://hg.openjdk.java.net/ 里面。查看native对应的代码。

类的加载方式
1.隐式加载：new
2.显式加载：loadClass，forName等
类的装载过程？
1.加载：通过ClassLoader加载class文件字节码，生成Class对象。
2.链接：分为三个小步骤：
    校验：检查加载的class的正确性和安全性。
    准备：为类变量分配存储空间并设置类变量初始值。
    解析：JVM将常量池内的符号引用转换为直接引用。
3.初始化：执行类变量赋值和静态代码块。
loadClass和forName的区别？
    Class.forName方法执行了类的初始化。但是类名.class.getClassLoader并没有执行初始化。有图有真相，代码如下：
    第一种方法，什么也没打印。第二种方法时候，执行了Robot里面的static方法。成功打印。
那么这种区别有什么作用呢？
    举个例子，如果现在是连接数据库，就得用Class.forname，而不能用别的。因为com.mysql.jdbc.Driver类里面，有一段代码是static代码块里面的，如果用上面的方式loadclass，那么是加载不到的，所以只能用class.forname来进行加载；像spring的ioc，加载一些bean的时候，都是用的上面方式loadClass，因为spring中使用了大量的lazyLoading懒加载技术。为了提高加载速度。

